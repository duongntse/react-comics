{"version":3,"sources":["PathCmdToBash.js","App.jsx","reportWebVitals.js","index.js"],"names":["PathCmdToBash","state","convertedPath","pathValue","btnCopyState","copyHandler","e","resInputElm","document","getElementById","focus","select","execCommand","setState","handleChange","value","String","raw","target","isCmdPath","test","isBashPath","includes","convertToBashPath","convertToCmdPath","split","filter","d","join","toLowerCase","pathArr","replace","toUpperCase","className","id","this","onChange","type","placeholder","readOnly","onClick","INIT","COPPIED","React","Component","Loading","ComicSiteButtons","items","length","reduce","acc","curr","currInd","arr","push","map","a","base_site_url","comic","ind","Button","variant","href","base_site_name","Copyright","ComicChapters","useState","comics","setComics","selectedComic","setSelectedComic","filterByComicSite","siteName","newItems","item","sites","style","fontSize","color","Row","sort","b","Date","raw_time","Col","xs","sm","md","lg","Card","border","height","padding","Header","overflow","Title","Link","_","truncate","width","Img","src","cover_img","marginLeft","transform","Body","comic_url","comic_name","Subtitle","Moment","fromNow","chapter_number_link","chapter_number_text","prev_chap","App","isLoadedItems","fetch","process","method","headers","then","response","json","Navbar","bg","Brand","alt","Jumbotron","borderRight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"m0BAEqBA,E,4MACjBC,MAAQ,CACJC,cAAe,GACfC,UAAW,GACXC,aAAc,Q,EAElBC,YAAc,SAACC,GACX,IAAMC,EAAcC,SAASC,eAAe,sBAE5CF,EAAYG,QACZH,EAAYI,SACZH,SAASI,YAAY,QACrB,EAAKC,SAAS,CAAET,aAAc,a,EAGlCU,aAAe,SAACR,GACZ,IAAMS,EAAQC,OAAOC,IAAV,IAAgBX,EAAEY,OAAOH,OACpC,EAAKF,SAAS,CAAEV,UAAWY,IAG3B,IAEMI,EAFa,gCAEUC,KAAKL,GAC5BM,EAFc,oCAEWD,KAAKL,GAIpC,GAFA,EAAKF,SAAS,CAAET,aAAc,SAE1Be,EACA,GAAKJ,EAAMO,SAAS,KAMhB,EAAKT,SAAS,CAAEX,cAAe,SANT,CACtB,IAAMA,EAAgBc,OAAOC,IAAV,IAAgB,EAAKM,kBACpCR,IAEJ,EAAKF,SAAS,CAAEX,uBAIjB,GAAImB,EACP,GAAKN,EAAMO,SAAS,MAMhB,EAAKT,SAAS,CAAEX,cAAe,SANR,CACvB,IAAMA,EAAgBc,OAAOC,IAAV,IAAgB,EAAKO,iBACpCT,IAEJ,EAAKF,SAAS,CAAEX,uBAIjB,EAAKW,SAAS,CAAEX,cAAe,M,EAE1CqB,kBAAoB,SAACR,GAQjB,MANiB,CACb,QADa,mBAEVC,OAAOC,IAAP,IAAaF,GACXU,MAAM,UACNC,QAAO,SAACC,GAAD,OAAQ,CAAC,GAAI,IAAL,MAAgBL,SAASK,QAC/CC,KAAK,KACSC,e,EAGpBL,iBAAmB,SAACT,GAEhB,IAAIe,EAAUd,OAAOC,IAAP,IAAaF,GACtBgB,QAAQ,QAAS,IACjBN,MAAM,QACNC,QAAO,SAACC,GAAD,OAAQ,CAAC,GAAI,IAAK,KAAKL,SAASK,MAK5C,OAHAG,EAAQ,GAAKA,EAAQ,GAAGE,cAAgB,IAExBhB,OAAOC,IAAV,IAAgBa,EAAQF,KAAK,Q,uDAK1C,OACI,qCACI,oBAAIK,UAAU,iBAAd,+CAGA,sBAAKA,UAAU,wBAAf,UACI,qBAAKA,UAAU,YAAf,2BACA,uBACIC,GAAG,YACHnB,MAAOoB,KAAKlC,MAAME,UAClBiC,SAAUD,KAAKrB,aACfuB,KAAK,OACLC,YAAY,iCAGpB,sBAAKL,UAAU,wBAAf,UACI,uBACIC,GAAG,qBACHG,KAAK,OACLtB,MAAOoB,KAAKlC,MAAMC,cAClBqC,UAAQ,IAEZ,yBACIC,QAASL,KAAK9B,YACd4B,UAAU,oCAFd,UAII,mBAAGA,UAAU,cAET,CACIQ,KAAM,OACNC,QAAS,UACXP,KAAKlC,MAAMG,oBAIzB,8B,GA3G2BuC,IAAMC,WCgB3CC,EAAU,kBACZ,sBAAKZ,UAAU,aAAf,UACI,qBAAKA,UAAU,mBAAf,SACI,qBAAKA,UAAU,iBAAf,uBAEJ,0BAIFa,EAAmB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACxB,OAAIA,GAASA,EAAMC,OAAS,EACjBD,EACFE,QAAO,SAACC,EAAKC,EAAMC,EAASC,GAUzB,OATmB,IAAfH,EAAIF,OAAcE,EAAII,KAAKH,GAGtBD,EACIK,KAAI,SAACC,GAAD,OAAOA,EAAEC,iBACbnC,SAAS6B,EAAKM,gBAEnBP,EAAII,KAAKH,GAEVD,IACR,IACFK,KAAI,SAACG,EAAOC,GAAR,OACD,cAACC,EAAA,EAAD,CACI3B,UAAW,OAEXf,OAAO,SACP2C,QAAQ,kBACRC,KAAMJ,EAAMD,cALhB,SAOKC,EAAMK,gBALFJ,MASV,IAITK,EAAY,kBACd,qCACI,6CACA,wJAIA,mEACuC,IACnC,4BACI,6DAMVC,EAAgB,SAAC,GAAe,IAAblB,EAAY,EAAZA,MAAY,EACLmB,mBAASnB,GAAS,IADb,mBAC1BoB,EAD0B,KAClBC,EADkB,OAESF,mBAAS,OAFlB,mBAE1BG,EAF0B,KAEXC,EAFW,KAG3BC,EAAoB,SAACC,GACvB,GAAiB,QAAbA,EACAJ,EAAUrB,GACVuB,EAAiB,WACd,CACH,IAAMG,EAAW1B,EAAMrB,QACnB,SAACgD,GAAD,OAAUA,EAAKX,iBAAmBS,KAEtCJ,EAAUK,GACVH,EAAiBE,KAGnBG,EAAQ5B,EAAME,QAAO,SAACC,EAAKC,GAM7B,OALmB,IAAfD,EAAIF,OAAcE,EAAII,KAAKH,GAEtBD,EAAIK,KAAI,SAACC,GAAD,OAAOA,EAAEC,iBAAenC,SAAS6B,EAAKM,gBAC/CP,EAAII,KAAKH,GAEVD,IACR,IAEH,OACI,qCACI,qBAAKjB,UAAU,iBAAf,SACI,cAAC,EAAD,MAEJ,sBAAKA,UAAU,6BAAf,UACI,sBAAM2C,MAAO,CAAEC,SAAU,QAASC,MAAO,mBAAzC,sBAGCH,EAAM3B,OAAS,EACZ,qCACI,cAACY,EAAA,EAAD,CACI3B,UAAS,eACa,QAAlBoC,EAA0B,SAAW,IAEzCR,QAAQ,kBACRrB,QAAS,kBAAM+B,EAAkB,QALrC,iBAUCI,EAAMpB,KAAI,SAACG,EAAOC,GAAR,OACP,cAACC,EAAA,EAAD,CACI3B,UAAS,eACLoC,IAAkBX,EAAMK,eAClB,SACA,IAGVF,QAAQ,kBACRrB,QAAS,kBACL+B,EAAkBb,EAAMK,iBAThC,SAaKL,EAAMK,gBAPFJ,SAYjB,UAIR,cAACoB,EAAA,EAAD,CAAK9C,UAAU,2BAAf,SACKkC,EACIa,MAAK,SAACxB,EAAGyB,GAAJ,OAAU,IAAIC,KAAKD,EAAEE,UAAY,IAAID,KAAK1B,EAAE2B,aACjD5B,KAAI,SAACG,EAAOC,GACT,OACI,cAACyB,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAA/B,SACI,eAACC,EAAA,EAAD,CACIC,OAAO,OACPzD,UAAU,mBACV2C,MAAO,CAEHe,OAAQ,QACRC,QAAS,OANjB,UASI,cAACH,EAAA,EAAKI,OAAN,CAAaC,SAAS,SAAtB,SACI,cAACL,EAAA,EAAKM,MAAN,UACI,cAACN,EAAA,EAAKO,KAAN,CACI/D,UAAU,YACV6B,KAAMJ,EAAMD,cAFhB,SAIKwC,IAAEC,SACCxC,EAAMK,eACN,CACIf,OAAQ,WAM5B,qBACI4B,MAAO,CACHuB,MAAO,OACPR,OAAQ,QACRG,SAAU,UAJlB,SAOI,cAACL,EAAA,EAAKW,IAAN,CACIvC,QAAQ,MACRwC,IAAK3C,EAAM4C,UACX1B,MAAO,CACHuB,MAAO,OACPR,OAAQ,OAERY,WAAY,MACZC,UAAW,wBAKvB,eAACf,EAAA,EAAKgB,KAAN,WACI,cAAChB,EAAA,EAAKM,MAAN,UACI,cAACN,EAAA,EAAKO,KAAN,CACI/D,UAAU,YACV6B,KAAMJ,EAAMgD,UAFhB,SAIKT,IAAEC,SAASxC,EAAMiD,WAAY,CAC1B3D,OAAQ,SAIpB,cAACyC,EAAA,EAAKmB,SAAN,CAAe3E,UAAU,kBAAzB,SACK4E,IAAOnD,EAAMyB,UAAU2B,YAE5B,mBACI7E,UAAU,wBACV6B,KAAMJ,EAAMqD,oBAFhB,SAIKrD,EAAMsD,sBAGVtD,EAAMuD,UACH,mBACIhF,UAAU,wBACV6B,KACIJ,EAAMuD,UACDF,oBAJb,SAQQrD,EAAMuD,UACDD,sBAIb,UAhFuBrD,YAmKpDuD,EAvEf,4MACIjH,MAAQ,CAAE8C,MAAO,GAAIoE,eAAe,GADxC,kEAGyB,IAAD,OAChBhF,KAAKtB,SAAS,CAAEsG,eAAe,IAC/BC,MAAM,GAAD,OAAIC,GAAJ,eAAyC,CAC1CC,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAGnBC,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACzE,GACH,EAAKlC,SAAS,CAAEkC,QAAOoE,eAAe,SAftD,+BAkBc,IAAD,EAC4BhF,KAAKlC,MAA9B8C,EADH,EACGA,MAAOoE,EADV,EACUA,cACf,OACI,sBAAKlF,UAAU,MAAf,UACI,qBAAKA,UAAU,YAAf,SACI,cAAC0F,EAAA,EAAD,CAAQC,GAAG,OAAO/D,QAAQ,OAA1B,SACI,eAAC8D,EAAA,EAAOE,MAAR,CAAc/D,KAAK,QAAnB,UACI,qBACIgE,IAAI,GACJzB,IAAG,UAAKgB,GAAL,eACHlB,MAAM,KACNR,OAAO,KACP1D,UAAU,6BACX,IAPP,+BAYR,qBAAKA,UAAU,UAAf,SACI,qBAAKA,UAAU,MAAf,SACKkF,EACG,cAAC,EAAD,IAEA,cAAC,EAAD,CAAepE,MAAOA,QAIlC,qBAAKd,UAAU,YAAf,SACI,cAAC8F,EAAA,EAAD,UACI,eAAChD,EAAA,EAAD,WACI,cAACK,EAAA,EAAD,CACIR,MAAO,CACHoD,YAAa,oBAFrB,SAKI,cAAC,EAAD,MAEJ,eAAC5C,EAAA,EAAD,WACI,8CACC+B,EACG,cAAC,EAAD,IAEA,cAAC,EAAD,CAAkBpE,MAAOA,qBA5D7D,GAAyBJ,IAAMC,WCnOhBqF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCEdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJnI,SAASC,eAAe,SAM5BwH,M","file":"static/js/main.8678c9ca.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class PathCmdToBash extends React.Component {\r\n    state = {\r\n        convertedPath: \"\",\r\n        pathValue: \"\",\r\n        btnCopyState: \"INIT\",\r\n    };\r\n    copyHandler = (e) => {\r\n        const resInputElm = document.getElementById(\"convertedPathInput\");\r\n        // const value = resInputElm.getAttribute(\"value\");\r\n        resInputElm.focus();\r\n        resInputElm.select();\r\n        document.execCommand(\"copy\");\r\n        this.setState({ btnCopyState: \"COPPIED\" });\r\n        // state: btnCopyState: INIT, COPPIED,\r\n    };\r\n    handleChange = (e) => {\r\n        const value = String.raw`${e.target.value}`;\r\n        this.setState({ pathValue: value });\r\n        // let cmdPath = String.raw`C:\\Users\\DuongNTSE\\Desktop\\vscode_projects\\book-fullstack-react\\exercise-files\\food-lookup-complete`;\r\n        // let bashPath = String.raw`/mnt/c/Users/DuongNTSE/Desktop/vscode_projects/book-fullstack-react/exercise-files/food-lookup-complete`;\r\n        const cmdMatcher = /[A-Z]:\\\\((\\w+(\\-)?)?(\\\\)?)+/gi;\r\n        const bashMatcher = /\\/mnt\\/[A-Z]((\\w+(\\-)?)?(\\/)?)+/gi;\r\n        const isCmdPath = cmdMatcher.test(value);\r\n        const isBashPath = bashMatcher.test(value);\r\n\r\n        this.setState({ btnCopyState: \"INIT\" });\r\n\r\n        if (isCmdPath) {\r\n            if (!value.includes(\"/\")) {\r\n                const convertedPath = String.raw`${this.convertToBashPath(\r\n                    value\r\n                )}`;\r\n                this.setState({ convertedPath });\r\n            } else {\r\n                this.setState({ convertedPath: \"\" });\r\n            }\r\n        } else if (isBashPath) {\r\n            if (!value.includes(\"\\\\\")) {\r\n                const convertedPath = String.raw`${this.convertToCmdPath(\r\n                    value\r\n                )}`;\r\n                this.setState({ convertedPath });\r\n            } else {\r\n                this.setState({ convertedPath: \"\" });\r\n            }\r\n        } else this.setState({ convertedPath: \"\" });\r\n    };\r\n    convertToBashPath = (value) => {\r\n        // let value =\"C:\\UsersDuongNTSEDesktop\\vscode_projects\\book-fullstack-reactexercise-files\\food-lookup-complete\";\r\n        const bashPath = [\r\n            \"/mnt\",\r\n            ...String.raw`${value}`\r\n                .split(/(:|\\\\)/)\r\n                .filter((d) => ![\"\", \":\", `\\\\`].includes(d)),\r\n        ].join(\"/\");\r\n        return bashPath.toLowerCase();\r\n        // this.setState(bashPath);\r\n    };\r\n    convertToCmdPath = (value) => {\r\n        // /mnt/c/Users/DuongNTSE/Desktop/vscode_projects/book-fullstack-react/exercise-files/food-lookup-complete\r\n        let pathArr = String.raw`${value}`\r\n            .replace(\"/mnt/\", \"\")\r\n            .split(/(\\/)/)\r\n            .filter((d) => ![\"\", \":\", \"/\"].includes(d));\r\n\r\n        pathArr[0] = pathArr[0].toUpperCase() + \":\";\r\n\r\n        const cmdPath = String.raw`${pathArr.join(\"\\\\\")}`;\r\n        return cmdPath;\r\n        // this.setState(cmdPath);\r\n    };\r\n    render() {\r\n        return (\r\n            <>\r\n                <h2 className=\"ui header my-2\">\r\n                    Convert Path between CMD and BASH\r\n                </h2>\r\n                <div className=\"ui fluid action input\">\r\n                    <div className=\"ui button\">CMD/Bash Path</div>\r\n                    <input\r\n                        id=\"inputPath\"\r\n                        value={this.state.pathValue}\r\n                        onChange={this.handleChange}\r\n                        type=\"text\"\r\n                        placeholder=\"C:\\Users or /mnt/c/Users\"\r\n                    />\r\n                </div>\r\n                <div className=\"ui fluid action input\">\r\n                    <input\r\n                        id=\"convertedPathInput\"\r\n                        type=\"text\"\r\n                        value={this.state.convertedPath}\r\n                        readOnly\r\n                    />\r\n                    <button\r\n                        onClick={this.copyHandler}\r\n                        className=\"ui teal right labeled icon button\"\r\n                    >\r\n                        <i className=\"copy icon\"></i>\r\n                        {\r\n                            {\r\n                                INIT: \"Copy\",\r\n                                COPPIED: \"Copied\",\r\n                            }[this.state.btnCopyState]\r\n                        }\r\n                    </button>\r\n                </div>\r\n                <hr />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React, { useState } from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n// import Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Navbar from \"react-bootstrap/Navbar\";\n// import Nav from \"react-bootstrap/Nav\";\n// import Form from \"react-bootstrap/Form\";\n// import FormControl from \"react-bootstrap/FormControl\";\n// import items from \"./api/items.json\";\nimport Moment from \"moment\";\nimport _ from \"lodash\";\n\nimport \"./App.css\";\nimport PathCmdToBash from \"./PathCmdToBash\";\n\nconst Loading = () => (\n    <div className=\"ui segment\">\n        <div className=\"ui active dimmer\">\n            <div className=\"ui text loader\">Loading</div>\n        </div>\n        <p></p>\n    </div>\n);\n\nconst ComicSiteButtons = ({ items }) => {\n    if (items && items.length > 0) {\n        return items\n            .reduce((acc, curr, currInd, arr) => {\n                if (acc.length === 0) acc.push(curr);\n                else {\n                    if (\n                        !acc\n                            .map((a) => a.base_site_url)\n                            .includes(curr.base_site_url)\n                    )\n                        acc.push(curr);\n                }\n                return acc;\n            }, [])\n            .map((comic, ind) => (\n                <Button\n                    className={\"mx-1\"}\n                    key={ind}\n                    target=\"_blank\"\n                    variant=\"outline-primary\"\n                    href={comic.base_site_url}\n                >\n                    {comic.base_site_name}\n                </Button>\n            ));\n    } else {\n        return [];\n    }\n};\n\nconst Copyright = () => (\n    <>\n        <h1>More Info: </h1>\n        <p>\n            I get sources from other pages as mentioned on the top of every\n            card. So please access their pages to read more comics.\n        </p>\n        <p>\n            About @copyrights, please contact:{\" \"}\n            <b>\n                <i>Duongntse@gmail.com</i>\n            </b>\n        </p>\n    </>\n);\n\nconst ComicChapters = ({ items }) => {\n    const [comics, setComics] = useState(items || []);\n    const [selectedComic, setSelectedComic] = useState(\"all\");\n    const filterByComicSite = (siteName) => {\n        if (siteName === \"all\") {\n            setComics(items);\n            setSelectedComic(\"all\");\n        } else {\n            const newItems = items.filter(\n                (item) => item.base_site_name === siteName\n            );\n            setComics(newItems);\n            setSelectedComic(siteName);\n        }\n    };\n    const sites = items.reduce((acc, curr) => {\n        if (acc.length === 0) acc.push(curr);\n        else {\n            if (!acc.map((a) => a.base_site_url).includes(curr.base_site_url))\n                acc.push(curr);\n        }\n        return acc;\n    }, []);\n\n    return (\n        <>\n            <div className=\"container my-4\">\n                <PathCmdToBash />\n            </div>\n            <div className=\"container my-4 text-center\">\n                <span style={{ fontSize: \"1.5em\", color: \"rgb(51, 51, 51)\" }}>\n                    Display:\n                </span>\n                {sites.length > 0 ? (\n                    <>\n                        <Button\n                            className={`mx-1 ${\n                                selectedComic === \"all\" ? \"active\" : \"\"\n                            }`}\n                            variant=\"outline-primary\"\n                            onClick={() => filterByComicSite(\"all\")}\n                            // href={comic.base_site_url}\n                        >\n                            All\n                        </Button>\n                        {sites.map((comic, ind) => (\n                            <Button\n                                className={`mx-1 ${\n                                    selectedComic === comic.base_site_name\n                                        ? \"active\"\n                                        : \"\"\n                                }`}\n                                key={ind}\n                                variant=\"outline-primary\"\n                                onClick={() =>\n                                    filterByComicSite(comic.base_site_name)\n                                }\n                                // href={comic.base_site_url}\n                            >\n                                {comic.base_site_name}\n                            </Button>\n                        ))}\n                    </>\n                ) : (\n                    \"None\"\n                )}\n            </div>\n\n            <Row className=\"justify-content-md-start\">\n                {comics\n                    .sort((a, b) => new Date(b.raw_time) - new Date(a.raw_time))\n                    .map((comic, ind) => {\n                        return (\n                            <Col xs={12} sm={6} md={4} lg={2} key={ind}>\n                                <Card\n                                    border=\"info\"\n                                    className=\"text-center my-1\"\n                                    style={{\n                                        // width: \"14rem\",\n                                        height: \"470px\",\n                                        padding: \"0px\",\n                                    }}\n                                >\n                                    <Card.Header overflow=\"hidden\">\n                                        <Card.Title>\n                                            <Card.Link\n                                                className=\"text-dark\"\n                                                href={comic.base_site_url}\n                                            >\n                                                {_.truncate(\n                                                    comic.base_site_name,\n                                                    {\n                                                        length: 15,\n                                                    }\n                                                )}\n                                            </Card.Link>\n                                        </Card.Title>\n                                    </Card.Header>\n                                    <div\n                                        style={{\n                                            width: \"100%\",\n                                            height: \"288px\",\n                                            overflow: \"hidden\",\n                                        }}\n                                    >\n                                        <Card.Img\n                                            variant=\"top\"\n                                            src={comic.cover_img}\n                                            style={{\n                                                width: \"100%\",\n                                                height: \"auto\",\n                                                // maxHeight: \"250px\",\n                                                marginLeft: \"50%\",\n                                                transform: \"translateX(-50%)\",\n                                            }}\n                                        />\n                                    </div>\n\n                                    <Card.Body>\n                                        <Card.Title>\n                                            <Card.Link\n                                                className=\"text-dark\"\n                                                href={comic.comic_url}\n                                            >\n                                                {_.truncate(comic.comic_name, {\n                                                    length: 35,\n                                                })}\n                                            </Card.Link>\n                                        </Card.Title>\n                                        <Card.Subtitle className=\"mb-2 text-muted\">\n                                            {Moment(comic.raw_time).fromNow()}\n                                        </Card.Subtitle>\n                                        <a\n                                            className=\"m-1 chapterNumberLink\"\n                                            href={comic.chapter_number_link}\n                                        >\n                                            {comic.chapter_number_text}\n                                        </a>\n\n                                        {comic.prev_chap ? (\n                                            <a\n                                                className=\"m-1 chapterNumberLink\"\n                                                href={\n                                                    comic.prev_chap\n                                                        .chapter_number_link\n                                                }\n                                            >\n                                                {\n                                                    comic.prev_chap\n                                                        .chapter_number_text\n                                                }\n                                            </a>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        );\n                    })}\n            </Row>\n        </>\n    );\n};\n\nexport class App extends React.Component {\n    state = { items: [], isLoadedItems: true };\n\n    componentDidMount() {\n        this.setState({ isLoadedItems: true });\n        fetch(`${process.env.PUBLIC_URL}/items.json`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then((response) => {\n                return response.json();\n            })\n            .then((items) => {\n                this.setState({ items, isLoadedItems: false });\n            });\n    }\n    render() {\n        const { items, isLoadedItems } = this.state;\n        return (\n            <div className=\"app\">\n                <div className=\"headerApp\">\n                    <Navbar bg=\"dark\" variant=\"dark\">\n                        <Navbar.Brand href=\"#home\">\n                            <img\n                                alt=\"\"\n                                src={`${process.env.PUBLIC_URL}/logorb.svg`}\n                                width=\"30\"\n                                height=\"30\"\n                                className=\"d-inline-block align-top\"\n                            />{\" \"}\n                            Latest Comic Chapters\n                        </Navbar.Brand>\n                    </Navbar>\n                </div>\n                <div className=\"bodyApp\">\n                    <div className=\"p-4\">\n                        {isLoadedItems ? (\n                            <Loading />\n                        ) : (\n                            <ComicChapters items={items} />\n                        )}\n                    </div>\n                </div>\n                <div className=\"footerApp\">\n                    <Jumbotron>\n                        <Row>\n                            <Col\n                                style={{\n                                    borderRight: \"1px dashed black\",\n                                }}\n                            >\n                                <Copyright />\n                            </Col>\n                            <Col>\n                                <h1>Comic Sites:</h1>\n                                {isLoadedItems ? (\n                                    <Loading />\n                                ) : (\n                                    <ComicSiteButtons items={items} />\n                                )}\n                            </Col>\n                        </Row>\n                    </Jumbotron>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./semantic-dist/semantic.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}